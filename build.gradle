import groovy.json.JsonSlurper

group = 'com.galenframework'
version = '0.1-SNAPSHOT'

description = """Galen Framework Sample Java Test Project"""

ext {
    deviceList = ['chrome', 'firefox', 'windows', 'iPhone']
    ext {
        galenVersion = '2.3.6'
        testNGVersion = '6.7'
        groovyVersion = '2.4.12'
        chromeDriverVersion = '2.35'
        geckoDriverVersion = '0.19.1'
    }
}

apply plugin: 'java'
apply plugin: 'maven'
apply from: "gradle/osSpecificDownloads.gradle"

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.galenframework', name: 'galen-java-support', version:"$galenVersion"
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'org.testng', name: 'testng', version:"$testNGVersion"
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
}


task loadSystemProperties {

    def result = loadJSONConfiguration()
    System.setProperty("applicationUrl", result.getAt("environment").getAt(System.getProperty("env", "test")))
    System.setProperty("platform", System.getenv('PLATFORM'))
    System.setProperty("device", System.getProperty("galen.device", "chromeDesktop"))
    System.setProperty("device.type", result["device"][System.getProperty("device")]["deviceType"])
    System.setProperty("device.width", result["device"][System.getProperty("device")]["width"].toString())
    System.setProperty("device.height", result["device"][System.getProperty("device")]["height"].toString())

    System.setProperty("localBrowser", "Chrome")

    // if the platform is Browserstack, get the browserstack configuration values
    if (System.getenv("PLATFORM").equalsIgnoreCase("BrowserStack")){
        System.setProperty("browserStack.userName", result["BrowserStack"]["userName"])
        System.setProperty("browserStack.apiKey", result["BrowserStack"]["appKey"])
        System.setProperty("browserStack.realMobile", result["BrowserStack"]["realMobile"])
        System.setProperty("browserStack.captureVideo", result["BrowserStack"]["capturevideo"])
    }

    def browser = ""
    if((System.getProperty("galen.device").toUpperCase().contains("CHROME")) ||
            (System.getProperty("platform").equalsIgnoreCase() == "local"
                    && System.getProperty("device.type").equalsIgnoreCase() == "mobile")) {
        browser = "Chrome"
        dependsOn chromeDriverSetup
    } else if (System.getProperty("galen.device").toUpperCase().contains("FIREFOX")
                    && System.getProperty("platform").equalsIgnoreCase() == "local"){
        browser = "Firefox"
//        dependsOn firefoxDriverSetup
    } else if (System.getProperty("galen.device").toUpperCase().contains("SAFARI")
            && System.getProperty("platform").equalsIgnoreCase() == "local"){
        browser = "Safari"
//        dependsOn safariDriverSetup
    }
}


task responsivenessTest (type: Test) {

    // skip the cache and always run the task
    outputs.upToDateWhen {
        false
    }
    dependsOn loadSystemProperties

    systemProperties System.properties

    useTestNG()
}


def loadJSONConfiguration(){
    def slurper = new JsonSlurper()
    def result = slurper.parse(new File("config.json"))
    return result
}

