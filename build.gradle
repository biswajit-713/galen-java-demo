import org.apache.tools.ant.taskdefs.condition.Os
import groovy.json.JsonSlurper

apply plugin: 'java'
apply plugin: 'maven'
apply from: "gradle/osSpecificDownloads.gradle"

group = 'com.galenframework'
version = '0.1-SNAPSHOT'

description = """Galen Framework Sample Java Test Project"""

sourceCompatibility = 1.8
targetCompatibility = 1.8

ext {
    ext {
        galenVersion = '2.3.6'
        testNGVersion = '6.7'
        groovyVersion = '2.4.12'
        chromeDriverVersion = '2.35'
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile group: 'com.galenframework', name: 'galen-java-support', version:"$galenVersion"
    testCompile group: 'org.hamcrest', name: 'hamcrest-all', version:'1.3'
    testCompile group: 'org.testng', name: 'testng', version:"$testNGVersion"
    testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
    compile group: 'org.projectlombok', name: 'lombok', version: '1.16.16'
}


task chromeDriverSetup {
    dependsOn unzipChromeDriver

    def chromeDriverFileName = Os.isFamily(Os.FAMILY_WINDOWS) ? "chromedriver.exe" : "chromedriver"
//    systemProperty "webdriver.chrome.driver", new File(unzipChromeDriver.outputs.files.singleFile, chromedriverFilename).absolutePath
}


task responsivenessTest (type: Test) {

    // skip the cache and always run the task
    outputs.upToDateWhen {
        false
    }

    def result = loadJSONConfiguration()
    System.setProperty("applicationUrl", result.getAt("environment").getAt(System.getProperty("env", "test")))
    System.setProperty("platform", System.getenv('PLATFORM'))
    System.setProperty("device", System.getProperty("galen.device", "chromeDesktop"))
    System.setProperty("device.type", result["device"][System.getProperty("device")]["deviceType"])
    System.setProperty("device.width", result["device"][System.getProperty("device")]["width"].toString())
    System.setProperty("device.height", result["device"][System.getProperty("device")]["height"].toString())


    // if the platform is Browserstack, get the browserstack configuration values
    if (System.getenv("PLATFORM").equalsIgnoreCase("BrowserStack")){
        System.setProperty("browserStack.userName", result["BrowserStack"]["userName"])
        System.setProperty("browserStack.apiKey", result["BrowserStack"]["appKey"])
        System.setProperty("browserStack.realMobile", result["BrowserStack"]["realMobile"])
        System.setProperty("browserStack.captureVideo", result["BrowserStack"]["capturevideo"])
    }

    systemProperties System.properties

    if ((System.getProperty("galen.device").toUpperCase() == "CHROME") ||
            (System.getProperty("platform").equalsIgnoreCase() == 'local'
                    && System.getProperty("device.type").equalsIgnoreCase() == "mobile")) {
        chromeDriverSetup
    }
    useTestNG()
}

//def loadConfiguration(){
//    def device = System.getProperty("galen.device", "test")
//    def environment = System.getProperty("env", "test")
//    project.ext.environment = environment
//    project.ext.device = device
//
//    def configFile = file('config.groovy')
//    def envConfig = new ConfigSlurper(environment).parse(configFile.toURI().toURL())
//    def deviceConfig = new ConfigSlurper(device).parse(configFile.toURI().toURL())
//    project.ext.envConfig = envConfig
//    project.ext.deviceConfig = deviceConfig
//}

def loadJSONConfiguration(){
    def slurper = new JsonSlurper()
    def result = slurper.parse(new File("config.json"))
    return result
}

